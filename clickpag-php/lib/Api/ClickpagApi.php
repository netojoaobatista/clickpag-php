<?php
/**
 * ClickpagApi
 * PHP version 5
 *
 * @category Class
 * @package  Clickpag\
 * @author   http://github.com/clickpag-api/clickpag-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/clickpag-api/clickpag-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the clickpag code generator program. 
 * https://github.com/clickpag-api/clickpag-codegen 
 * Do not edit the class manually.
 */

namespace Clickpag\Api;

use \Clickpag\Configuration;
use \Clickpag\ApiClient;
use \Clickpag\ApiException;
use \Clickpag\ObjectSerializer;

/**
 * ClickpagApi Class Doc Comment
 *
 * @category Class
 * @package  Clickpag\
 * @author   http://github.com/clickpag-api/clickpag-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/clickpag-api/clickpag-codegen
 */
class ClickpagApi
{

    /**
     * API Client
     * @var \Clickpag\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Clickpag\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.clickpagrede.com.br');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Clickpag\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Clickpag\ApiClient $apiClient set the API client
     * @return ClickpagApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * createOrder
     *
     * Operação que cria um pedido
     *
     * @param string $clickpag_access_token Token de acesso para quem esta efetuando a chamada aos recursos disponibilizados através da API. Tipo de parâmetro: header (required)
     * @param string $clickpag_api_version versão (required)
     * @param \Clickpag\Model\Order $order Pedido. Tipo de parâmetro: body (required)
     * @return \Clickpag\Model\Response
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function createOrder($clickpag_access_token, $clickpag_api_version, $order)
    {
        list($response, $statusCode, $httpHeader) = $this->createOrderWithHttpInfo ($clickpag_access_token, $clickpag_api_version, $order);
        return $response; 
    }


    /**
     * createOrderWithHttpInfo
     *
     * Operação que cria um pedido
     *
     * @param string $clickpag_access_token Token de acesso para quem esta efetuando a chamada aos recursos disponibilizados através da API. Tipo de parâmetro: header (required)
     * @param string $clickpag_api_version versão (required)
     * @param \Clickpag\Model\Order $order Pedido. Tipo de parâmetro: body (required)
     * @return Array of \Clickpag\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function createOrderWithHttpInfo($clickpag_access_token, $clickpag_api_version, $order)
    {
        
        // verify the required parameter 'clickpag_access_token' is set
        if ($clickpag_access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickpag_access_token when calling createOrder');
        }
        // verify the required parameter 'clickpag_api_version' is set
        if ($clickpag_api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickpag_api_version when calling createOrder');
        }
        // verify the required parameter 'order' is set
        if ($order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order when calling createOrder');
        }
  
        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($clickpag_access_token !== null) {
            $headerParams['clickpag-access-token'] = $this->apiClient->getSerializer()->toHeaderValue($clickpag_access_token);
        }// header params
        
        if ($clickpag_api_version !== null) {
            $headerParams['clickpag-api-version'] = $this->apiClient->getSerializer()->toHeaderValue($clickpag_api_version);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Clickpag\Model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Clickpag\Model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getTransaction
     *
     * Obtém detalhes de uma transaç&ccedil;&atilde;o
     *
     * @param string $clickpag_access_token Token de accesso para quem esta efetuando a chamada aos recursos disponibilizados atrav&amp;eacute;s da API. Tipo de parâmetro: header (required)
     * @param string $clickpag_api_version versão  da api (required)
     * @param string $id id da transação (required)
     * @return \Clickpag\Model\Transaction
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function getTransaction($clickpag_access_token, $clickpag_api_version, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->getTransactionWithHttpInfo ($clickpag_access_token, $clickpag_api_version, $id);
        return $response; 
    }


    /**
     * getTransactionWithHttpInfo
     *
     * Obtém detalhes de uma transaç&ccedil;&atilde;o
     *
     * @param string $clickpag_access_token Token de accesso para quem esta efetuando a chamada aos recursos disponibilizados atrav&amp;eacute;s da API. Tipo de parâmetro: header (required)
     * @param string $clickpag_api_version versão  da api (required)
     * @param string $id id da transação (required)
     * @return Array of \Clickpag\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function getTransactionWithHttpInfo($clickpag_access_token, $clickpag_api_version, $id)
    {
        
        // verify the required parameter 'clickpag_access_token' is set
        if ($clickpag_access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickpag_access_token when calling getTransaction');
        }
        // verify the required parameter 'clickpag_api_version' is set
        if ($clickpag_api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickpag_api_version when calling getTransaction');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTransaction');
        }
  
        // parse inputs
        $resourcePath = "/transactions/{id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($clickpag_access_token !== null) {
            $headerParams['clickpag-access-token'] = $this->apiClient->getSerializer()->toHeaderValue($clickpag_access_token);
        }// header params
        
        if ($clickpag_api_version !== null) {
            $headerParams['clickpag-api-version'] = $this->apiClient->getSerializer()->toHeaderValue($clickpag_api_version);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Clickpag\Model\Transaction'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Clickpag\Model\Transaction', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Transaction', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * refund
     *
     * Opera&ccedil;&atilde;o que cria um estorno
     *
     * @param string $clickpag_access_token Token de accesso para quem esta efetuando a chamada aos recursos disponibilizados atrav&amp;eacute;s da API. Tipo de parâmetro: header (required)
     * @param string $version versão (required)
     * @param string $id id da transação (required)
     * @param \Clickpag\Model\AmountTransaction $amount Transação. Tipo de parâmetro: body (required)
     * @return void
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function refund($clickpag_access_token, $version, $id, $amount)
    {
        list($response, $statusCode, $httpHeader) = $this->refundWithHttpInfo ($clickpag_access_token, $version, $id, $amount);
        return $response; 
    }


    /**
     * refundWithHttpInfo
     *
     * Opera&ccedil;&atilde;o que cria um estorno
     *
     * @param string $clickpag_access_token Token de accesso para quem esta efetuando a chamada aos recursos disponibilizados atrav&amp;eacute;s da API. Tipo de parâmetro: header (required)
     * @param string $version versão (required)
     * @param string $id id da transação (required)
     * @param \Clickpag\Model\AmountTransaction $amount Transação. Tipo de parâmetro: body (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Clickpag\ApiException on non-2xx response
     */
    public function refundWithHttpInfo($clickpag_access_token, $version, $id, $amount)
    {
        
        // verify the required parameter 'clickpag_access_token' is set
        if ($clickpag_access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickpag_access_token when calling refund');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling refund');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling refund');
        }
        // verify the required parameter 'amount' is set
        if ($amount === null) {
            throw new \InvalidArgumentException('Missing the required parameter $amount when calling refund');
        }
  
        // parse inputs
        $resourcePath = "/transactions/{id}/refunds";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($clickpag_access_token !== null) {
            $headerParams['clickpag-access-token'] = $this->apiClient->getSerializer()->toHeaderValue($clickpag_access_token);
        }// header params
        
        if ($version !== null) {
            $headerParams['version'] = $this->apiClient->getSerializer()->toHeaderValue($version);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($amount)) {
            $_tempBody = $amount;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clickpag\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
